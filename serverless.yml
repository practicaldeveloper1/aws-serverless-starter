service: qi-handler-super-test-1234
custom:
  # We define a DynamoDB table for the registered users and for the devices.
  settings:
    USERS_TABLE: users-super-test-1234
    DEVICES_TABLE: devices-super-test-1234
  documentation:
    api:
      info:
        version: '1.0.0'
        title: Just Codding API
        description: This is our Just Codding API
    # We define the model schema of the JSON payload in the POST request for device. If the request does not contain the required attributes, it is rejected by API Gateway.
    models:
      - name: deviceModel
        contentType: "application/json"
        schema: ${file(models/device.json)}
provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1
  # We define enviromental variable called settings, which we input the table name.
  environment: ${self:custom.settings}
  iamRoleStatements:
  # We set permissions for all the lambda functions, they should be able to interact with DynamoDB users and devices table
   - Effect: "Allow"
     Action:
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
     Resource:
      - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.USERS_TABLE}"
      - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.DEVICES_TABLE}"
functions:
  createDevice:
    handler: handler-devices.createDevice  # we define funtion handler to be triggered when the following http event occurs
    events:
    - http:
        path: /device/
        method: post
        authorizer:  # we define cognito authorizer, the token should be validated in API Gateway before lambda is called. The lambda can get username from Cognito authorizer object which is the event.requestContext.authorizer.
            arn: arn:aws:cognito-idp:eu-central-1:400727838093:userpool/eu-central-1_ZJ0JfITUt       
        #  We tell API gateway to use the request model we defined for device, for the request validation
        reqValidatorName: 'xMyRequestValidator'
        documentation:
          summary: "Post a device"
          description: "Post a device"
          requestModels:
            application/json: deviceModel
  getAllDevices:
    handler: handler-devices.getAllDevices
    events:
    - http:
        path: /device
        method: get
        authorizer:
            arn: arn:aws:cognito-idp:eu-central-1:400727838093:userpool/eu-central-1_ZJ0JfITUt        
  getDevice:
    handler: handler-devices.getDevice
    events:
    - http:
        path: /device/{sn}
        method: get
        authorizer:
            arn: arn:aws:cognito-idp:eu-central-1:400727838093:userpool/eu-central-1_ZJ0JfITUt          
  updateDevice:
    handler: handler-devices.updateDevice
    events:
    - http:
        path: /device/{sn}
        method: put
        authorizer:
            arn: arn:aws:cognito-idp:eu-central-1:400727838093:userpool/eu-central-1_ZJ0JfITUt        
  deleteDevice:
    handler: handler-devices.deleteDevice
    events:
    - http:
        path: /device/{sn}
        method: delete
        authorizer:
            arn: arn:aws:cognito-idp:eu-central-1:400727838093:userpool/eu-central-1_ZJ0JfITUt        
resources:
  Resources:
    # We define our API Gateway resource and the name of our api
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: device-api
    # We makes use of the serverless-reqvalidator-plugin package, and we make use of AWS::ApiGateway::RequestValidator to validate the request body
    xMyRequestValidator:  
         Type: "AWS::ApiGateway::RequestValidator"
         Properties:
           Name: 'xMyRequestValidator'
           RestApiId: 
             Ref: ApiGatewayRestApi
           ValidateRequestBody: true
   # We define our DynamoDB tables. The user's table has primary key ID and the device's table has primary key USER ID and sort key Serial Number (sn)     
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.USERS_TABLE}      
    DevicesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: "user_id"
          AttributeType: "S"           
        - AttributeName: "sn"
          AttributeType: "S"
        KeySchema:
          - AttributeName: "user_id"
            KeyType: "HASH"
          - AttributeName: "sn"
            KeyType: "RANGE"           
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.DEVICES_TABLE}               
plugins:
  - serverless-offline
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
